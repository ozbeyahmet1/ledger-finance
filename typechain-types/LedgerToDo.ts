/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LedgerToDoInterface extends utils.Interface {
  functions: {
    "_idUser()": FunctionFragment;
    "createList(string)": FunctionFragment;
    "creators(uint256)": FunctionFragment;
    "getAddress()": FunctionFragment;
    "getCreatorData(address)": FunctionFragment;
    "getMessage()": FunctionFragment;
    "message(uint256)": FunctionFragment;
    "messageId(uint256)": FunctionFragment;
    "ownerOfContract()": FunctionFragment;
    "toDoListApps(address)": FunctionFragment;
    "toggle(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_idUser"
      | "createList"
      | "creators"
      | "getAddress"
      | "getCreatorData"
      | "getMessage"
      | "message"
      | "messageId"
      | "ownerOfContract"
      | "toDoListApps"
      | "toggle"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_idUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "message",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "messageId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toDoListApps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggle",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "_idUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toDoListApps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggle", data: BytesLike): Result;

  events: {
    "ToDoEvent(address,uint256,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ToDoEvent"): EventFragment;
}

export interface ToDoEventEventObject {
  account: string;
  userId: BigNumber;
  message: string;
  completed: boolean;
}
export type ToDoEventEvent = TypedEvent<
  [string, BigNumber, string, boolean],
  ToDoEventEventObject
>;

export type ToDoEventEventFilter = TypedEventFilter<ToDoEventEvent>;

export interface LedgerToDo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LedgerToDoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _idUser(overrides?: CallOverrides): Promise<[BigNumber]>;

    createList(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddress(overrides?: CallOverrides): Promise<[string[]]>;

    getCreatorData(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, boolean]>;

    getMessage(overrides?: CallOverrides): Promise<[string[]]>;

    message(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    messageId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerOfContract(overrides?: CallOverrides): Promise<[string]>;

    toDoListApps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        account: string;
        userId: BigNumber;
        message: string;
        completed: boolean;
      }
    >;

    toggle(
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _idUser(overrides?: CallOverrides): Promise<BigNumber>;

  createList(
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddress(overrides?: CallOverrides): Promise<string[]>;

  getCreatorData(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, boolean]>;

  getMessage(overrides?: CallOverrides): Promise<string[]>;

  message(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  messageId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOfContract(overrides?: CallOverrides): Promise<string>;

  toDoListApps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean] & {
      account: string;
      userId: BigNumber;
      message: string;
      completed: boolean;
    }
  >;

  toggle(
    _creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _idUser(overrides?: CallOverrides): Promise<BigNumber>;

    createList(
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    creators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddress(overrides?: CallOverrides): Promise<string[]>;

    getCreatorData(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, boolean]>;

    getMessage(overrides?: CallOverrides): Promise<string[]>;

    message(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    messageId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfContract(overrides?: CallOverrides): Promise<string>;

    toDoListApps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        account: string;
        userId: BigNumber;
        message: string;
        completed: boolean;
      }
    >;

    toggle(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ToDoEvent(address,uint256,string,bool)"(
      account?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      message?: null,
      completed?: null
    ): ToDoEventEventFilter;
    ToDoEvent(
      account?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      message?: null,
      completed?: null
    ): ToDoEventEventFilter;
  };

  estimateGas: {
    _idUser(overrides?: CallOverrides): Promise<BigNumber>;

    createList(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorData(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessage(overrides?: CallOverrides): Promise<BigNumber>;

    message(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfContract(overrides?: CallOverrides): Promise<BigNumber>;

    toDoListApps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggle(
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _idUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createList(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatorData(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    message(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toDoListApps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggle(
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
