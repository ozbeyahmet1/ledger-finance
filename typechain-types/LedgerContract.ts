/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LedgerContract {
  export type AssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    username: PromiseOrValue<string>;
    data: PromiseOrValue<string>;
  };

  export type AssetStructOutput = [BigNumber, string, string] & {
    id: BigNumber;
    username: string;
    data: string;
  };

  export type TransactionStruct = {
    id: PromiseOrValue<BigNumberish>;
    username: PromiseOrValue<string>;
    data: PromiseOrValue<string>;
  };

  export type TransactionStructOutput = [BigNumber, string, string] & {
    id: BigNumber;
    username: string;
    data: string;
  };
}

export interface LedgerContractInterface extends utils.Interface {
  functions: {
    "addAsset(string)": FunctionFragment;
    "addTransaction(string)": FunctionFragment;
    "fetchMyAssets()": FunctionFragment;
    "fetchMyTransactions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAsset"
      | "addTransaction"
      | "fetchMyAssets"
      | "fetchMyTransactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyTransactions",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyTransactions",
    data: BytesLike
  ): Result;

  events: {
    "AddAsset(address,uint256)": EventFragment;
    "AddTransaction(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddTransaction"): EventFragment;
}

export interface AddAssetEventObject {
  recipient: string;
  taskId: BigNumber;
}
export type AddAssetEvent = TypedEvent<
  [string, BigNumber],
  AddAssetEventObject
>;

export type AddAssetEventFilter = TypedEventFilter<AddAssetEvent>;

export interface AddTransactionEventObject {
  recipient: string;
  taskId: BigNumber;
}
export type AddTransactionEvent = TypedEvent<
  [string, BigNumber],
  AddTransactionEventObject
>;

export type AddTransactionEventFilter = TypedEventFilter<AddTransactionEvent>;

export interface LedgerContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LedgerContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTransaction(
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchMyAssets(
      overrides?: CallOverrides
    ): Promise<[LedgerContract.AssetStructOutput[]]>;

    fetchMyTransactions(
      overrides?: CallOverrides
    ): Promise<[LedgerContract.TransactionStructOutput[]]>;
  };

  addAsset(
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTransaction(
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchMyAssets(
    overrides?: CallOverrides
  ): Promise<LedgerContract.AssetStructOutput[]>;

  fetchMyTransactions(
    overrides?: CallOverrides
  ): Promise<LedgerContract.TransactionStructOutput[]>;

  callStatic: {
    addAsset(
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTransaction(
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMyAssets(
      overrides?: CallOverrides
    ): Promise<LedgerContract.AssetStructOutput[]>;

    fetchMyTransactions(
      overrides?: CallOverrides
    ): Promise<LedgerContract.TransactionStructOutput[]>;
  };

  filters: {
    "AddAsset(address,uint256)"(
      recipient?: null,
      taskId?: null
    ): AddAssetEventFilter;
    AddAsset(recipient?: null, taskId?: null): AddAssetEventFilter;

    "AddTransaction(address,uint256)"(
      recipient?: null,
      taskId?: null
    ): AddTransactionEventFilter;
    AddTransaction(recipient?: null, taskId?: null): AddTransactionEventFilter;
  };

  estimateGas: {
    addAsset(
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTransaction(
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchMyAssets(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyTransactions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTransaction(
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchMyAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
