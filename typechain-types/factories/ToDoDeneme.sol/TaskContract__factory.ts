/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TaskContract,
  TaskContractInterface,
} from "../../ToDoDeneme.sol/TaskContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
    ],
    name: "AddTask",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isDeleted",
        type: "bool",
      },
    ],
    name: "DeleteTask",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "taskText",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isDeleted",
        type: "bool",
      },
    ],
    name: "addTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isDeleted",
        type: "bool",
      },
    ],
    name: "deleteTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyTasks",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "username",
            type: "address",
          },
          {
            internalType: "string",
            name: "taskText",
            type: "string",
          },
          {
            internalType: "bool",
            name: "isDeleted",
            type: "bool",
          },
        ],
        internalType: "struct TaskContract.Task[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f51806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806320df4581146100465780636e13f81814610062578063aaba290714610080575b600080fd5b610060600480360381019061005b9190610821565b61009c565b005b61006a610222565b6040516100779190610a8a565b60405180910390f35b61009a60048036038101906100959190610ad8565b61056e565b005b600080805490509050600060405180608001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184151581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908161016f9190610d24565b5060608201518160030160006101000a81548160ff0219169083151502179055505050336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f54e1ba1832d428fbd7e7792beaf62b1fc5a382c207ffd614209c1413e94fda3382604051610215929190610e14565b60405180910390a1505050565b60606000808054905067ffffffffffffffff811115610244576102436106be565b5b60405190808252806020026020018201604052801561027d57816020015b61026a61064f565b8152602001906001900390816102625790505b5090506000805b6000805490508110156104b4573373ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156103355750600015156000828154811061031257610311610e3d565b5b906000526020600020906004020160030160009054906101000a900460ff161515145b156104a1576000818154811061034e5761034d610e3d565b5b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546103d790610b47565b80601f016020809104026020016040519081016040528092919081815260200182805461040390610b47565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b505050505081526020016003820160009054906101000a900460ff16151515158152505083838151811061048757610486610e3d565b5b6020026020010181905250818061049d90610e9b565b9250505b80806104ac90610e9b565b915050610284565b5060008167ffffffffffffffff8111156104d1576104d06106be565b5b60405190808252806020026020018201604052801561050a57816020015b6104f761064f565b8152602001906001900390816104ef5790505b50905060005b828110156105645783818151811061052b5761052a610e3d565b5b602002602001015182828151811061054657610545610e3d565b5b6020026020010181905250808061055c90610e9b565b915050610510565b5080935050505090565b3373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361064b5780600083815481106105e9576105e8610e3d565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055507ff88a35c3d2016c409a46570b994a17b408dbc83c14a03f521512d50b85386d068282604051610642929190610ef2565b60405180910390a15b5050565b604051806080016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106f6826106ad565b810181811067ffffffffffffffff82111715610715576107146106be565b5b80604052505050565b600061072861068f565b905061073482826106ed565b919050565b600067ffffffffffffffff821115610754576107536106be565b5b61075d826106ad565b9050602081019050919050565b82818337600083830152505050565b600061078c61078784610739565b61071e565b9050828152602081018484840111156107a8576107a76106a8565b5b6107b384828561076a565b509392505050565b600082601f8301126107d0576107cf6106a3565b5b81356107e0848260208601610779565b91505092915050565b60008115159050919050565b6107fe816107e9565b811461080957600080fd5b50565b60008135905061081b816107f5565b92915050565b6000806040838503121561083857610837610699565b5b600083013567ffffffffffffffff8111156108565761085561069e565b5b610862858286016107bb565b92505060206108738582860161080c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6108bc816108a9565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ed826108c2565b9050919050565b6108fd816108e2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561093d578082015181840152602081019050610922565b60008484015250505050565b600061095482610903565b61095e818561090e565b935061096e81856020860161091f565b610977816106ad565b840191505092915050565b61098b816107e9565b82525050565b60006080830160008301516109a960008601826108b3565b5060208301516109bc60208601826108f4565b50604083015184820360408601526109d48282610949565b91505060608301516109e96060860182610982565b508091505092915050565b6000610a008383610991565b905092915050565b6000602082019050919050565b6000610a208261087d565b610a2a8185610888565b935083602082028501610a3c85610899565b8060005b85811015610a785784840389528151610a5985826109f4565b9450610a6483610a08565b925060208a01995050600181019050610a40565b50829750879550505050505092915050565b60006020820190508181036000830152610aa48184610a15565b905092915050565b610ab5816108a9565b8114610ac057600080fd5b50565b600081359050610ad281610aac565b92915050565b60008060408385031215610aef57610aee610699565b5b6000610afd85828601610ac3565b9250506020610b0e8582860161080c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b5f57607f821691505b602082108103610b7257610b71610b18565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610bda7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b9d565b610be48683610b9d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610c21610c1c610c17846108a9565b610bfc565b6108a9565b9050919050565b6000819050919050565b610c3b83610c06565b610c4f610c4782610c28565b848454610baa565b825550505050565b600090565b610c64610c57565b610c6f818484610c32565b505050565b5b81811015610c9357610c88600082610c5c565b600181019050610c75565b5050565b601f821115610cd857610ca981610b78565b610cb284610b8d565b81016020851015610cc1578190505b610cd5610ccd85610b8d565b830182610c74565b50505b505050565b600082821c905092915050565b6000610cfb60001984600802610cdd565b1980831691505092915050565b6000610d148383610cea565b9150826002028217905092915050565b610d2d82610903565b67ffffffffffffffff811115610d4657610d456106be565b5b610d508254610b47565b610d5b828285610c97565b600060209050601f831160018114610d8e5760008415610d7c578287015190505b610d868582610d08565b865550610dee565b601f198416610d9c86610b78565b60005b82811015610dc457848901518255600182019150602085019450602081019050610d9f565b86831015610de15784890151610ddd601f891682610cea565b8355505b6001600288020188555050505b505050505050565b610dff816108e2565b82525050565b610e0e816108a9565b82525050565b6000604082019050610e296000830185610df6565b610e366020830184610e05565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ea6826108a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ed857610ed7610e6c565b5b600182019050919050565b610eec816107e9565b82525050565b6000604082019050610f076000830185610e05565b610f146020830184610ee3565b939250505056fea264697066735822122067ce807b145b1ec3a650e8bc5a941fb8bd0f3eb3b820c9b25551f7a02898717b64736f6c63430008110033";

type TaskContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TaskContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TaskContract__factory extends ContractFactory {
  constructor(...args: TaskContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TaskContract> {
    return super.deploy(overrides || {}) as Promise<TaskContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TaskContract {
    return super.attach(address) as TaskContract;
  }
  override connect(signer: Signer): TaskContract__factory {
    return super.connect(signer) as TaskContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TaskContractInterface {
    return new utils.Interface(_abi) as TaskContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TaskContract {
    return new Contract(address, _abi, signerOrProvider) as TaskContract;
  }
}
